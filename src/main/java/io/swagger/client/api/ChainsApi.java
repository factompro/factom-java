/*
 * Factom PRO API
 * Factom PRO is a cloud blockchain gateway for securing your business data. Store data on the Bitcoin and Ethereum blockchains at a low fixed price of $0.01 per write. No cryptocurrency. No nodes.
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@factom.pro
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ExtIds;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse500;
import io.swagger.client.model.NewChain;
import io.swagger.client.model.SearchExtIds;
import io.swagger.client.model.SortParams;
import io.swagger.client.model.StatusParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChainsApi {
    private ApiClient apiClient;

    public ChainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChainsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createChain
     * @param body  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChainCall(NewChain body, String callbackUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (callbackUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callback_url", callbackUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChainValidateBeforeCall(NewChain body, String callbackUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createChain(Async)");
        }
        
        com.squareup.okhttp.Call call = createChainCall(body, callbackUrl, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create chain
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param body  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 createChain(NewChain body, String callbackUrl) throws ApiException {
        ApiResponse<InlineResponse2003> resp = createChainWithHttpInfo(body, callbackUrl);
        return resp.getData();
    }

    /**
     * Create chain
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param body  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> createChainWithHttpInfo(NewChain body, String callbackUrl) throws ApiException {
        com.squareup.okhttp.Call call = createChainValidateBeforeCall(body, callbackUrl, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create chain (asynchronously)
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param body  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChainAsync(NewChain body, String callbackUrl, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChainValidateBeforeCall(body, callbackUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createChain
     * @param extIds  (required)
     * @param content  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChainCall(ExtIds extIds, byte[] content, String callbackUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (callbackUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callback_url", callbackUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (extIds != null)
        localVarFormParams.put("extIds", extIds);
        if (content != null)
        localVarFormParams.put("content", content);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChainValidateBeforeCall(ExtIds extIds, byte[] content, String callbackUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'extIds' is set
        if (extIds == null) {
            throw new ApiException("Missing the required parameter 'extIds' when calling createChain(Async)");
        }
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling createChain(Async)");
        }
        
        com.squareup.okhttp.Call call = createChainCall(extIds, content, callbackUrl, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create chain
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param extIds  (required)
     * @param content  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 createChain(ExtIds extIds, byte[] content, String callbackUrl) throws ApiException {
        ApiResponse<InlineResponse2003> resp = createChainWithHttpInfo(extIds, content, callbackUrl);
        return resp.getData();
    }

    /**
     * Create chain
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param extIds  (required)
     * @param content  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> createChainWithHttpInfo(ExtIds extIds, byte[] content, String callbackUrl) throws ApiException {
        com.squareup.okhttp.Call call = createChainValidateBeforeCall(extIds, content, callbackUrl, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create chain (asynchronously)
     * This endpoint allows you to create new chain on the Factom blockchain.
     * @param extIds  (required)
     * @param content  (required)
     * @param callbackUrl URL where to send status updates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChainAsync(ExtIds extIds, byte[] content, String callbackUrl, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChainValidateBeforeCall(extIds, content, callbackUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChain
     * @param chainId Chain ID of the Factom chain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getChain(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainCall(chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chain
     * This endpoint returns Factom chain by Chain ID.
     * @param chainId Chain ID of the Factom chain (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getChain(String chainId) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getChainWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Get chain
     * This endpoint returns Factom chain by Chain ID.
     * @param chainId Chain ID of the Factom chain (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getChainWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getChainValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chain (asynchronously)
     * This endpoint returns Factom chain by Chain ID.
     * @param chainId Chain ID of the Factom chain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainAsync(String chainId, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChainEntries
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainEntriesCall(String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}/entries"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainEntriesValidateBeforeCall(String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getChainEntries(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainEntriesCall(chainId, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chain entries
     * This endpoint returns entries of Factom chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 getChainEntries(String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2005> resp = getChainEntriesWithHttpInfo(chainId, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Get chain entries
     * This endpoint returns entries of Factom chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> getChainEntriesWithHttpInfo(String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = getChainEntriesValidateBeforeCall(chainId, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chain entries (asynchronously)
     * This endpoint returns entries of Factom chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainEntriesAsync(String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainEntriesValidateBeforeCall(chainId, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChainFirstEntry
     * @param chainId Chain ID of the Factom chain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainFirstEntryCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}/entries/first"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainFirstEntryValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getChainFirstEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainFirstEntryCall(chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get first entry of the chain
     * This endpoint returns first entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 getChainFirstEntry(String chainId) throws ApiException {
        ApiResponse<InlineResponse2006> resp = getChainFirstEntryWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Get first entry of the chain
     * This endpoint returns first entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> getChainFirstEntryWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getChainFirstEntryValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get first entry of the chain (asynchronously)
     * This endpoint returns first entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainFirstEntryAsync(String chainId, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainFirstEntryValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChainLastEntry
     * @param chainId Chain ID of the Factom chain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainLastEntryCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}/entries/last"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainLastEntryValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getChainLastEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainLastEntryCall(chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get last entry of the chain
     * This endpoint returns last entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 getChainLastEntry(String chainId) throws ApiException {
        ApiResponse<InlineResponse2006> resp = getChainLastEntryWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Get last entry of the chain
     * This endpoint returns last entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> getChainLastEntryWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getChainLastEntryValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get last entry of the chain (asynchronously)
     * This endpoint returns last entry of chain.
     * @param chainId Chain ID of the Factom chain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainLastEntryAsync(String chainId, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainLastEntryValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserChains
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserChainsCall(Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserChainsValidateBeforeCall(Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUserChainsCall(all, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user&#x27;s chains
     * This endpoint returns all chains, with that API user works.
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getUserChains(Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getUserChainsWithHttpInfo(all, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Get user&#x27;s chains
     * This endpoint returns all chains, with that API user works.
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getUserChainsWithHttpInfo(Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = getUserChainsValidateBeforeCall(all, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user&#x27;s chains (asynchronously)
     * This endpoint returns all chains, with that API user works.
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserChainsAsync(Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserChainsValidateBeforeCall(all, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchChainEntries
     * @param body  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchChainEntriesCall(SearchExtIds body, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}/entries/search"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchChainEntriesValidateBeforeCall(SearchExtIds body, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchChainEntries(Async)");
        }
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling searchChainEntries(Async)");
        }
        
        com.squareup.okhttp.Call call = searchChainEntriesCall(body, chainId, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search chain entries
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param body  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 searchChainEntries(SearchExtIds body, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2005> resp = searchChainEntriesWithHttpInfo(body, chainId, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Search chain entries
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param body  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> searchChainEntriesWithHttpInfo(SearchExtIds body, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = searchChainEntriesValidateBeforeCall(body, chainId, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search chain entries (asynchronously)
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param body  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchChainEntriesAsync(SearchExtIds body, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchChainEntriesValidateBeforeCall(body, chainId, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchChainEntries
     * @param extIds  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchChainEntriesCall(ExtIds extIds, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/{chainId}/entries/search"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (extIds != null)
        localVarFormParams.put("extIds", extIds);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchChainEntriesValidateBeforeCall(ExtIds extIds, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'extIds' is set
        if (extIds == null) {
            throw new ApiException("Missing the required parameter 'extIds' when calling searchChainEntries(Async)");
        }
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling searchChainEntries(Async)");
        }
        
        com.squareup.okhttp.Call call = searchChainEntriesCall(extIds, chainId, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search chain entries
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param extIds  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 searchChainEntries(ExtIds extIds, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2005> resp = searchChainEntriesWithHttpInfo(extIds, chainId, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Search chain entries
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param extIds  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> searchChainEntriesWithHttpInfo(ExtIds extIds, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = searchChainEntriesValidateBeforeCall(extIds, chainId, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search chain entries (asynchronously)
     * This endpoint allows you to search among entries of the chain by one or multiple external IDs.
     * @param extIds  (required)
     * @param chainId Chain ID of the Factom chain (required)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchChainEntriesAsync(ExtIds extIds, String chainId, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchChainEntriesValidateBeforeCall(extIds, chainId, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUserChains
     * @param body  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUserChainsCall(SearchExtIds body, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/chains/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUserChainsValidateBeforeCall(SearchExtIds body, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchUserChains(Async)");
        }
        
        com.squareup.okhttp.Call call = searchUserChainsCall(body, all, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search user&#x27;s chains
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param body  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 searchUserChains(SearchExtIds body, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2002> resp = searchUserChainsWithHttpInfo(body, all, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Search user&#x27;s chains
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param body  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> searchUserChainsWithHttpInfo(SearchExtIds body, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = searchUserChainsValidateBeforeCall(body, all, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search user&#x27;s chains (asynchronously)
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param body  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserChainsAsync(SearchExtIds body, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserChainsValidateBeforeCall(body, all, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUserChains
     * @param extIds  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUserChainsCall(ExtIds extIds, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chains/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (extIds != null)
        localVarFormParams.put("extIds", extIds);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUserChainsValidateBeforeCall(ExtIds extIds, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'extIds' is set
        if (extIds == null) {
            throw new ApiException("Missing the required parameter 'extIds' when calling searchUserChains(Async)");
        }
        
        com.squareup.okhttp.Call call = searchUserChainsCall(extIds, all, start, limit, status, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search user&#x27;s chains
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param extIds  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 searchUserChains(ExtIds extIds, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        ApiResponse<InlineResponse2002> resp = searchUserChainsWithHttpInfo(extIds, all, start, limit, status, sort);
        return resp.getData();
    }

    /**
     * Search user&#x27;s chains
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param extIds  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> searchUserChainsWithHttpInfo(ExtIds extIds, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort) throws ApiException {
        com.squareup.okhttp.Call call = searchUserChainsValidateBeforeCall(extIds, all, start, limit, status, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search user&#x27;s chains (asynchronously)
     * This endpoint allows you to search among user&#x27;s chains by one or multiple external IDs.
     * @param extIds  (required)
     * @param all Return chains from entire blockchain (rather than only chains that the API user has touched) (optional)
     * @param start Number of items to skip before returning the results (optional)
     * @param limit Number of items you would like back in each page (optional)
     * @param status Filter results by object status (optional)
     * @param sort Sorting order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserChainsAsync(ExtIds extIds, Integer all, Integer start, Integer limit, StatusParams status, SortParams sort, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserChainsValidateBeforeCall(extIds, all, start, limit, status, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
